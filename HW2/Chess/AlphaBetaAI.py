import chess
from math import inf
import random
import time

INFINITE = 999999
SEARCH_DEPTH = 4
PIECE_VALUES = {
    "P": 10,
    "B": 30,
    "N": 30,
    "R": 50,
    "Q": 90,
    "K": 900,
    "p": -10,
    "b": -30,
    "n": -30,
    "r": -50,
    "q": -90,
    "k": -900
}
PIECE_WEIGHTS = {
     "P": [
         [0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0],
         [5.0,  5.0,  5.0,  5.0,  5.0,  5.0,  5.0,  5.0],
         [1.0,  1.0,  2.0,  3.0,  3.0,  2.0,  1.0,  1.0],
         [0.5,  0.5,  1.0,  2.5,  2.5,  1.0,  0.5,  0.5],
         [0.0,  0.0,  0.0,  2.0,  2.0,  0.0,  0.0,  0.0],
         [0.5, -0.5, -1.0,  0.0,  0.0, -1.0, -0.5,  0.5],
         [0.5,  1.0, 1.0,  -2.0, -2.0,  1.0,  1.0,  0.5],
         [0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0]
     ],
     "N": [
         [-5.0, -4.0, -3.0, -3.0, -3.0, -3.0, -4.0, -5.0],
         [-4.0, -2.0,  0.0,  0.0,  0.0,  0.0, -2.0, -4.0],
         [-3.0,  0.0,  1.0,  1.5,  1.5,  1.0,  0.0, -3.0],
         [-3.0,  0.5,  1.5,  2.0,  2.0,  1.5,  0.5, -3.0],
         [-3.0,  0.0,  1.5,  2.0,  2.0,  1.5,  0.0, -3.0],
         [-3.0,  0.5,  1.0,  1.5,  1.5,  1.0,  0.5, -3.0],
         [-4.0, -2.0,  0.0,  0.5,  0.5,  0.0, -2.0, -4.0],
         [-5.0, -4.0, -3.0, -3.0, -3.0, -3.0, -4.0, -5.0]
     ],
     "B": [
         [-2.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -2.0],
         [-1.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0, -1.0],
         [-1.0,  0.0,  0.5,  1.0,  1.0,  0.5,  0.0, -1.0],
         [-1.0,  0.5,  0.5,  1.0,  1.0,  0.5,  0.5, -1.0],
         [-1.0,  0.0,  1.0,  1.0,  1.0,  1.0,  0.0, -1.0],
         [-1.0,  1.0,  1.0,  1.0,  1.0,  1.0,  1.0, -1.0],
         [-1.0,  0.5,  0.0,  0.0,  0.0,  0.0,  0.5, -1.0],
         [-2.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -2.0]
     ],
     "R": [
         [0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0],
         [0.5,  1.0,  1.0,  1.0,  1.0,  1.0,  1.0,  0.5],
         [-0.5,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0, -0.5],
         [-0.5,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0, -0.5],
         [-0.5,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0, -0.5],
         [-0.5,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0, -0.5],
         [-0.5,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0, -0.5],
         [0.0,   0.0, 0.0,  0.5,  0.5,  0.0,  0.0,  0.0]
     ],
     "Q": [
         [-2.0, -1.0, -1.0, -0.5, -0.5, -1.0, -1.0, -2.0],
         [-1.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0, -1.0],
         [-1.0,  0.0,  0.5,  0.5,  0.5,  0.5,  0.0, -1.0],
         [-0.5,  0.0,  0.5,  0.5,  0.5,  0.5,  0.0, -0.5],
         [0.0,  0.0,  0.5,  0.5,  0.5,  0.5,  0.0, -0.5],
         [-1.0,  0.5,  0.5,  0.5,  0.5,  0.5,  0.0, -1.0],
         [-1.0,  0.0,  0.5,  0.0,  0.0,  0.0,  0.0, -1.0],
         [-2.0, -1.0, -1.0, -0.5, -0.5, -1.0, -1.0, -2.0]
     ],
     "K": [
         [-3.0, -4.0, -4.0, -5.0, -5.0, -4.0, -4.0, -3.0],
         [-3.0, -4.0, -4.0, -5.0, -5.0, -4.0, -4.0, -3.0],
         [-3.0, -4.0, -4.0, -5.0, -5.0, -4.0, -4.0, -3.0],
         [-3.0, -4.0, -4.0, -5.0, -5.0, -4.0, -4.0, -3.0],
         [-2.0, -3.0, -3.0, -4.0, -4.0, -3.0, -3.0, -2.0],
         [-1.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -1.0],
         [2.0,  2.0,  0.0,  0.0,  0.0,  0.0,  2.0,  2.0],
         [2.0,  3.0,  1.0,  0.0,  0.0,  1.0,  3.0,  2.0]
     ],
     "p": [
         [0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0],
         [0.5,  1.0, 1.0,  -2.0, -2.0,  1.0,  1.0,  0.5],
         [0.5, -0.5, -1.0,  0.0,  0.0, -1.0, -0.5,  0.5],
         [0.0,  0.0,  0.0,  2.0,  2.0,  0.0,  0.0,  0.0],
         [0.5,  0.5,  1.0,  2.5,  2.5,  1.0,  0.5,  0.5],
         [1.0,  1.0,  2.0,  3.0,  3.0,  2.0,  1.0,  1.0],
         [5.0,  5.0,  5.0,  5.0,  5.0,  5.0,  5.0,  5.0],
         [0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0]
     ],
     "n": [
         [-5.0, -4.0, -3.0, -3.0, -3.0, -3.0, -4.0, -5.0],
         [-4.0, -2.0,  0.0,  0.5,  0.5,  0.0, -2.0, -4.0],
         [-3.0,  0.5,  1.0,  1.5,  1.5,  1.0,  0.5, -3.0],
         [-3.0,  0.0,  1.5,  2.0,  2.0,  1.5,  0.0, -3.0],
         [-3.0,  0.5,  1.5,  2.0,  2.0,  1.5,  0.5, -3.0],
         [-3.0,  0.0,  1.0,  1.5,  1.5,  1.0,  0.0, -3.0],
         [-4.0, -2.0,  0.0,  0.0,  0.0,  0.0, -2.0, -4.0],
         [-5.0, -4.0, -3.0, -3.0, -3.0, -3.0, -4.0, -5.0]
     ],
     "b": [
         [-2.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -2.0],
         [-1.0,  0.5,  0.0,  0.0,  0.0,  0.0,  0.5, -1.0],
         [-1.0,  1.0,  1.0,  1.0,  1.0,  1.0,  1.0, -1.0],
         [-1.0,  0.0,  1.0,  1.0,  1.0,  1.0,  0.0, -1.0],
         [-1.0,  0.5,  0.5,  1.0,  1.0,  0.5,  0.5, -1.0],
         [-1.0,  0.0,  0.5,  1.0,  1.0,  0.5,  0.0, -1.0],
         [-1.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0, -1.0],
         [-2.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -2.0]
     ],
     "r": [
         [0.0,   0.0, 0.0,  0.5,  0.5,  0.0,  0.0,  0.0],
         [-0.5,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0, -0.5],
         [-0.5,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0, -0.5],
         [-0.5,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0, -0.5],
         [-0.5,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0, -0.5],
         [-0.5,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0, -0.5],
         [0.5,  1.0,  1.0,  1.0,  1.0,  1.0,  1.0,  0.5],
         [0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0]
     ],
     "q": [
         [-2.0, -1.0, -1.0, -0.5, -0.5, -1.0, -1.0, -2.0],
         [-1.0,  0.0,  0.5,  0.0,  0.0,  0.0,  0.0, -1.0],
         [-1.0,  0.5,  0.5,  0.5,  0.5,  0.5,  0.0, -1.0],
         [0.0,  0.0,  0.5,  0.5,  0.5,  0.5,  0.0, -0.5],
         [-0.5,  0.0,  0.5,  0.5,  0.5,  0.5,  0.0, -0.5],
         [-1.0,  0.0,  0.5,  0.5,  0.5,  0.5,  0.0, -1.0],
         [-1.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0, -1.0],
         [-2.0, -1.0, -1.0, -0.5, -0.5, -1.0, -1.0, -2.0]
     ],
     "k": [
         [2.0,  3.0,  1.0,  0.0,  0.0,  1.0,  3.0,  2.0],
         [2.0,  2.0,  0.0,  0.0,  0.0,  0.0,  2.0,  2.0],
         [-1.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -1.0],
         [-2.0, -3.0, -3.0, -4.0, -4.0, -3.0, -3.0, -2.0],
         [-3.0, -4.0, -4.0, -5.0, -5.0, -4.0, -4.0, -3.0],
         [-3.0, -4.0, -4.0, -5.0, -5.0, -4.0, -4.0, -3.0],
         [-3.0, -4.0, -4.0, -5.0, -5.0, -4.0, -4.0, -3.0],
         [-3.0, -4.0, -4.0, -5.0, -5.0, -4.0, -4.0, -3.0]
     ]
}

class AlphaBetaAI():
    def __init__(self):
        self.previousBoards = set()
        #self.t1 = time.time()

    def choose_move(self, board):
        bestMove = None
        moves = []
        if board.turn == chess.WHITE:
            bestScore = -INFINITE
            isMax = True
        else:
            bestScore = INFINITE
            isMax = False
        self.previousBoards.add(board.board_fen())
        for move in board.legal_moves:
            alpha = -INFINITE
            beta = INFINITE
            board.push(move)
            if board.board_fen() in self.previousBoards:
                score = -INFINITE
                board.pop()
                continue
            score = self.alpha_beta(board, SEARCH_DEPTH - 1, not isMax, alpha, beta)
            moves.append((move, score))
            #print(move, score)
            if isMax:
                if score > bestScore:
                    bestScore = score
                    bestMove = move
            else:
                if score < bestScore:
                    bestScore = score
                    bestMove = move
            board.pop()

        if bestMove == None:
            bestMove = random.choice(moves)

        board.push(bestMove)
        self.previousBoards.add(board.board_fen())
        #print(board)
        board.pop()
        
        print("Alpha Beta AI recommending move " + str(bestMove))
        #print(time.time() - self.t1)

        return bestMove


    def alpha_beta(self, board, depth, isMax, alpha, beta):
        if depth == 0:
            return self.evaluate(board)
        if isMax:
            bestScore = -INFINITE
            for move in board.legal_moves:
                board.push(move)
                score = self.alpha_beta(board, depth - 1, not isMax, alpha, beta)
                bestScore = max(bestScore, score)
                board.pop()
                alpha = max(alpha, bestScore)
                if beta <= alpha:
                    return bestScore
            return bestScore
        else:
            bestScore = INFINITE
            for move in board.legal_moves:
                board.push(move)
                score = self.alpha_beta(board, depth - 1, not isMax, alpha, beta)
                bestScore = min(bestScore, score)
                board.pop()
                beta = min(beta, bestScore)
                if beta <= alpha:
                    return bestScore
            return bestScore


    def evaluate(self, board):
        score = 0
        
        for square, piece in board.piece_map().items():
            symbol = piece.symbol()
            score += PIECE_VALUES[symbol] +\
            PIECE_WEIGHTS[symbol][chess.square_rank(square)][chess.square_file(square)]

        return score